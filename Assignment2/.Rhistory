xml_page <- read_html(link_df[1])
whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href') %>%
`[[`(1)
print(whitepaper_link)
print(length(grep("https://", whitepaper_link)))
print(length(grep("https://", whitepaper_link)) != 0)
# download file from whitepaper_link to Whitpapers
if (length(grep("https://", whitepaper_link) != 0)) {
download.file(whitepaper_link,
destfile = paste0("Whitepapers/WP_",link_df[2],"_",basename(whitepaper_link)))
}
})
coin_link_df2
coin_link_df2 <- coin_link_df[1:10,]
# link_df <- as.data.frame(coin_link_df[1,])
pbapply(coin_link_df2, MARGIN = 1, FUN = function(link_df) {
xml_page <- read_html(link_df[1])
whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href') %>%
`[[`(1)
print(link_df[2])
print(whitepaper_link)
print(length(grep("https://", whitepaper_link)))
print(length(grep("https://", whitepaper_link)) != 0)
# download file from whitepaper_link to Whitpapers
if (length(grep("https://", whitepaper_link) != 0)) {
download.file(whitepaper_link,
destfile = paste0("Whitepapers/WP_",link_df[2],"_",basename(whitepaper_link)))
}
})
coin_link_df2
pbapply(coin_link_df2, MARGIN = 1, FUN = function(link_df) {
print(link_df[2])
xml_page <- read_html(link_df[1])
whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href') %>%
`[[`(1)
print(whitepaper_link)
print(length(grep("https://", whitepaper_link)))
print(length(grep("https://", whitepaper_link)) != 0)
# download file from whitepaper_link to Whitpapers
if (length(grep("https://", whitepaper_link) != 0)) {
download.file(whitepaper_link,
destfile = paste0("Whitepapers/WP_",link_df[2],"_",basename(whitepaper_link)))
}
})
View(coin_link_df2)
read_html(	"https://coinpaprika.com/coin/ltc-litecoin")
read_html(	"https://coinpaprika.com/coin/ltc-litecoin") %>% html_nodes('.cp-coin__mobile-reverse td a')
read_html(	"https://coinpaprika.com/coin/ltc-litecoin") %>% html_nodes('.cp-coin__mobile-reverse td a') %>%           html_attr('href') %>%
`[[`(1)
read_html(	"https://coinpaprika.com/coin/ltc-litecoin") %>% html_nodes('.cp-coin__mobile-reverse td a') %>%           html_attr('href')
pbapply(coin_link_df2, MARGIN = 1, FUN = function(link_df) {
print(link_df[2])
xml_page <- read_html(link_df[1])
print(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href')))
if(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href'))!=0) {
whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href') %>%
`[[`(1)
}
print(whitepaper_link)
print(length(grep("https://", whitepaper_link)))
print(length(grep("https://", whitepaper_link)) != 0)
# download file from whitepaper_link to Whitpapers
if (length(grep("https://", whitepaper_link) != 0)) {
download.file(whitepaper_link,
destfile = paste0("Whitepapers/WP_",link_df[2],"_",basename(whitepaper_link)))
}
})
# setwd("~/Documents/Studium/Central European University (CEU)/Fall_Web Scraping/Assignment 2")
library(rvest)
library(stringr)
library(data.table)
library(httr)
library(jsonlite)
library(pbapply)
Sys.setenv(TZ='Europe/Berlin')
# Have your SelectorGadget on Google Chrome: https://selectorgadget.com/
# setwd("~/Documents/Studium/Central European University (CEU)/Fall_Web Scraping/Assignment 2")
library(rvest)
library(stringr)
library(data.table)
library(httr)
library(jsonlite)
library(pbapply)
Sys.setenv(TZ='Europe/Berlin')
# Have your SelectorGadget on Google Chrome: https://selectorgadget.com/
knitr::include_graphics("coinpaprika_json.png")
knitr::include_graphics("coinpaprika_link.png")
my_coins_URL <- 'https://coinpaprika.com/ajax/coins/'
# https://github.com/Bioconductor/GenomicDataCommons/issues/35
httr::set_config(httr::config(ssl_verifypeer=0L, ssl_verifyhost=0L))
httr::set_config(httr::config(ssl_verifypeer=0L, ssl_verifyhost=0L, sslversion=3))
get_coins <- httr::GET('https://coinpaprika.com/ajax/coins/')
# uses fromJSON instead of GET
process_coins <- function(my_coins_URL) {
# read in details table
coins <- fromJSON(my_coins_URL)
coins$tags <- NULL
coins_df<-do.call(data.frame, coins)
# process details table
coins_df_clean <- coins_df[,c(1:3)]
coins_df_clean$priceUSD <- round(as.numeric(coins_df$price_stats.usd$price))
coins_df_clean$priceBTC <- round(as.numeric(coins_df$price_stats.btc$price,2))
coins_df_clean$volume24h.USD <- round(as.numeric(coins_df$price_stats.usd$volume_24h,2))
coins_df_clean$Marketcap.USD <- as.numeric(coins_df$price_stats.usd$market_cap)
coins_df_clean$priceATH.USD <- round(coins_df$ath.usd$price,2)
coins_df_clean$percent_fromATH.USD <- coins_df$ath.usd$percent_from # % from all time high level
coins_df_clean$percent_toATH.USD <- coins_df$ath.usd$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.USD <- as.POSIXct(coins_df$ath.usd$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.BTC <- round(coins_df$ath.btc$price,2)
coins_df_clean$percent_fromATH.BTC <- coins_df$ath.btc$percent_from # % from all time high level
coins_df_clean$percent_toATH.BTC <- coins_df$ath.btc$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.BTC <- as.POSIXct(coins_df$ath.btc$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.ETH <- round(coins_df$ath.eth$price,2)
coins_df_clean$percent_fromATH.ETH <- coins_df$ath.eth$percent_from # % from all time high level
coins_df_clean$percent_toATH.ETH <- coins_df$ath.eth$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.ETH <- as.POSIXct(coins_df$ath.eth$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$rank <- coins_df$rank
coins_df_clean$type <- coins_df$type
# get links to coins, add it to link table
coin_link_df <- data.frame(
coin_link = sapply(coins$url_name, function(url_name){
paste0("https://coinpaprika.com/coin/",url_name)
}),
coin_name = coins$symbol,
stringsAsFactors = FALSE)
# for each link in linktable scrape whitepaper and safe it in folder Whitepapers
# ===========================================================================
# > @MIKE: The instructions said that I should download all whitepapers. I don't know how to deal with MISSING whitepapers or links that or not for download, but for VIEW/OPEN only.
#coin examples
# https://coinpaprika.com/coin/miota-iota --> https://static2.coinpaprika.com/storage/cdn/whitepapers/165497.pdf
# https://coinpaprika.com/coin/abx-arbidex/ --> no whitepaper
# https://coinpaprika.com/coin/usdt-tether/ --> no whitepaper
# https://coinpaprika.com/coin/eth-ethereum/ <-- now download, only OPEN
# ===========================================================================
coin_link_df2 <- coin_link_df[1:10,]
# link_df <- as.data.frame(coin_link_df[1,])
pbapply(coin_link_df2, MARGIN = 1, FUN = function(link_df) {
print(link_df[2])
xml_page <- read_html(link_df[1])
print(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href')))
if(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href'))!=0) {
whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href') %>%
`[[`(1)
}
print(whitepaper_link)
print(length(grep("https://", whitepaper_link)))
print(length(grep("https://", whitepaper_link)) != 0)
# download file from whitepaper_link to Whitpapers
if (length(grep("https://", whitepaper_link) != 0)) {
download.file(whitepaper_link,
destfile = paste0("Whitepapers/WP_",link_df[2],"_",basename(whitepaper_link)))
}
})
}
# uses fromJSON instead of GET
process_coins <- function(my_coins_URL) {
# read in details table
coins <- fromJSON(my_coins_URL)
coins$tags <- NULL
coins_df<-do.call(data.frame, coins)
# process details table
coins_df_clean <- coins_df[,c(1:3)]
coins_df_clean$priceUSD <- round(as.numeric(coins_df$price_stats.usd$price))
coins_df_clean$priceBTC <- round(as.numeric(coins_df$price_stats.btc$price,2))
coins_df_clean$volume24h.USD <- round(as.numeric(coins_df$price_stats.usd$volume_24h,2))
coins_df_clean$Marketcap.USD <- as.numeric(coins_df$price_stats.usd$market_cap)
coins_df_clean$priceATH.USD <- round(coins_df$ath.usd$price,2)
coins_df_clean$percent_fromATH.USD <- coins_df$ath.usd$percent_from # % from all time high level
coins_df_clean$percent_toATH.USD <- coins_df$ath.usd$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.USD <- as.POSIXct(coins_df$ath.usd$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.BTC <- round(coins_df$ath.btc$price,2)
coins_df_clean$percent_fromATH.BTC <- coins_df$ath.btc$percent_from # % from all time high level
coins_df_clean$percent_toATH.BTC <- coins_df$ath.btc$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.BTC <- as.POSIXct(coins_df$ath.btc$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.ETH <- round(coins_df$ath.eth$price,2)
coins_df_clean$percent_fromATH.ETH <- coins_df$ath.eth$percent_from # % from all time high level
coins_df_clean$percent_toATH.ETH <- coins_df$ath.eth$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.ETH <- as.POSIXct(coins_df$ath.eth$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$rank <- coins_df$rank
coins_df_clean$type <- coins_df$type
# get links to coins, add it to link table
coin_link_df <- data.frame(
coin_link = sapply(coins$url_name, function(url_name){
paste0("https://coinpaprika.com/coin/",url_name)
}),
coin_name = coins$symbol,
stringsAsFactors = FALSE)
# for each link in the coin_link_df table scrape whitepaper and safe it in folder Whitepapers
# do not download if there is no proper downloadlink
pbapply(coin_link_df, MARGIN = 1, FUN = function(link_df) {
print(link_df[2])
xml_page <- read_html(link_df[1])
print(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href')))
if(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href'))!=0) {
whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href') %>%
`[[`(1)
}
# download file from whitepaper_link to Whitpapers
if (length(grep("https://", whitepaper_link) != 0)) {
download.file(whitepaper_link,
destfile = paste0("Whitepapers/WP_",link_df[2],"_",basename(whitepaper_link)))
}
})
}
# uses fromJSON instead of GET
process_coins <- function(my_coins_URL) {
# read in details table
coins <- fromJSON(my_coins_URL)
coins$tags <- NULL
coins_df<-do.call(data.frame, coins)
# process details table
coins_df_clean <- coins_df[,c(1:3)]
coins_df_clean$priceUSD <- round(as.numeric(coins_df$price_stats.usd$price))
coins_df_clean$priceBTC <- round(as.numeric(coins_df$price_stats.btc$price,2))
coins_df_clean$volume24h.USD <- round(as.numeric(coins_df$price_stats.usd$volume_24h,2))
coins_df_clean$Marketcap.USD <- as.numeric(coins_df$price_stats.usd$market_cap)
coins_df_clean$priceATH.USD <- round(coins_df$ath.usd$price,2)
coins_df_clean$percent_fromATH.USD <- coins_df$ath.usd$percent_from # % from all time high level
coins_df_clean$percent_toATH.USD <- coins_df$ath.usd$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.USD <- as.POSIXct(coins_df$ath.usd$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.BTC <- round(coins_df$ath.btc$price,2)
coins_df_clean$percent_fromATH.BTC <- coins_df$ath.btc$percent_from # % from all time high level
coins_df_clean$percent_toATH.BTC <- coins_df$ath.btc$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.BTC <- as.POSIXct(coins_df$ath.btc$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.ETH <- round(coins_df$ath.eth$price,2)
coins_df_clean$percent_fromATH.ETH <- coins_df$ath.eth$percent_from # % from all time high level
coins_df_clean$percent_toATH.ETH <- coins_df$ath.eth$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.ETH <- as.POSIXct(coins_df$ath.eth$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$rank <- coins_df$rank
coins_df_clean$type <- coins_df$type
# get links to coins, add it to link table
coin_link_df <- data.frame(
coin_link = sapply(coins$url_name, function(url_name){
paste0("https://coinpaprika.com/coin/",url_name)
}),
coin_name = coins$symbol,
stringsAsFactors = FALSE)
# for each link in the coin_link_df table scrape whitepaper and safe it in folder Whitepapers
# do not download if there is no proper downloadlink
pbapply(coin_link_df, MARGIN = 1, FUN = function(link_df) {
print(link_df[2])
xml_page <- read_html(link_df[1])
print(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href')))
if(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href'))!=0) {
whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href') %>%
`[[`(1)
}
# download file from whitepaper_link to Whitpapers
if (length(grep("https://", whitepaper_link) != 0)) {
download.file(whitepaper_link,
destfile = paste0("Whitepapers/WP_",link_df[2],"_",basename(whitepaper_link)))
}
})
return(coins_df_clean)
}
coins_table <- process_coins(my_coins_URL[1:10,])
# uses fromJSON instead of GET
process_coins <- function(my_coins_URL, rows) {
# read in details table
coins <- fromJSON(my_coins_URL)
coins$tags <- NULL
coins_df<-do.call(data.frame, coins)
# process details table
coins_df_clean <- coins_df[,c(1:3)]
coins_df_clean$priceUSD <- round(as.numeric(coins_df$price_stats.usd$price))
coins_df_clean$priceBTC <- round(as.numeric(coins_df$price_stats.btc$price,2))
coins_df_clean$volume24h.USD <- round(as.numeric(coins_df$price_stats.usd$volume_24h,2))
coins_df_clean$Marketcap.USD <- as.numeric(coins_df$price_stats.usd$market_cap)
coins_df_clean$priceATH.USD <- round(coins_df$ath.usd$price,2)
coins_df_clean$percent_fromATH.USD <- coins_df$ath.usd$percent_from # % from all time high level
coins_df_clean$percent_toATH.USD <- coins_df$ath.usd$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.USD <- as.POSIXct(coins_df$ath.usd$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.BTC <- round(coins_df$ath.btc$price,2)
coins_df_clean$percent_fromATH.BTC <- coins_df$ath.btc$percent_from # % from all time high level
coins_df_clean$percent_toATH.BTC <- coins_df$ath.btc$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.BTC <- as.POSIXct(coins_df$ath.btc$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.ETH <- round(coins_df$ath.eth$price,2)
coins_df_clean$percent_fromATH.ETH <- coins_df$ath.eth$percent_from # % from all time high level
coins_df_clean$percent_toATH.ETH <- coins_df$ath.eth$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.ETH <- as.POSIXct(coins_df$ath.eth$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$rank <- coins_df$rank
coins_df_clean$type <- coins_df$type
# get links to coins, add it to link table
coin_link_df <- data.frame(
coin_link = sapply(coins$url_name, function(url_name){
paste0("https://coinpaprika.com/coin/",url_name)
}),
coin_name = coins$symbol,
stringsAsFactors = FALSE)
# for each link in the coin_link_df table scrape whitepaper and safe it in folder Whitepapers
# do not download if there is no proper downloadlink
pbapply(coin_link_df, MARGIN = 1, FUN = function(link_df) {
print(link_df[2])
xml_page <- read_html(link_df[1])
print(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href')))
if(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href'))!=0) {
whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href') %>%
`[[`(1)
}
# download file from whitepaper_link to Whitpapers
if (length(grep("https://", whitepaper_link) != 0)) {
download.file(whitepaper_link,
destfile = paste0("Whitepapers/WP_",link_df[2],"_",basename(whitepaper_link)))
}
})
return(coins_df_clean[rows,])
}
coins_table <- process_coins(my_coins_URL, c(1:10))
# uses fromJSON instead of GET
process_coins <- function(my_coins_URL, rows) {
# read in details table
coins <- fromJSON(my_coins_URL)
coins$tags <- NULL
coins_df<-do.call(data.frame, coins)
# process details table
coins_df_clean <- coins_df[,c(1:3)]
coins_df_clean$priceUSD <- round(as.numeric(coins_df$price_stats.usd$price))
coins_df_clean$priceBTC <- round(as.numeric(coins_df$price_stats.btc$price,2))
coins_df_clean$volume24h.USD <- round(as.numeric(coins_df$price_stats.usd$volume_24h,2))
coins_df_clean$Marketcap.USD <- as.numeric(coins_df$price_stats.usd$market_cap)
coins_df_clean$priceATH.USD <- round(coins_df$ath.usd$price,2)
coins_df_clean$percent_fromATH.USD <- coins_df$ath.usd$percent_from # % from all time high level
coins_df_clean$percent_toATH.USD <- coins_df$ath.usd$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.USD <- as.POSIXct(coins_df$ath.usd$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.BTC <- round(coins_df$ath.btc$price,2)
coins_df_clean$percent_fromATH.BTC <- coins_df$ath.btc$percent_from # % from all time high level
coins_df_clean$percent_toATH.BTC <- coins_df$ath.btc$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.BTC <- as.POSIXct(coins_df$ath.btc$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.ETH <- round(coins_df$ath.eth$price,2)
coins_df_clean$percent_fromATH.ETH <- coins_df$ath.eth$percent_from # % from all time high level
coins_df_clean$percent_toATH.ETH <- coins_df$ath.eth$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.ETH <- as.POSIXct(coins_df$ath.eth$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$rank <- coins_df$rank
coins_df_clean$type <- coins_df$type
# get links to coins, add it to link table
coin_link_df <- data.frame(
coin_link = sapply(coins$url_name, function(url_name){
paste0("https://coinpaprika.com/coin/",url_name)
}),
coin_name = coins$symbol,
stringsAsFactors = FALSE)
# for each link in the coin_link_df table scrape whitepaper and safe it in folder Whitepapers
# do not download if there is no proper downloadlink
pbapply(coin_link_df[rows,], MARGIN = 1, FUN = function(link_df) {
xml_page <- read_html(link_df[1])
if(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href'))!=0) {
whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href') %>%
`[[`(1)
}
# download file from whitepaper_link to Whitpapers
if (length(grep("https://", whitepaper_link) != 0)) {
download.file(whitepaper_link,
destfile = paste0("Whitepapers/WP_",link_df[2],"_",basename(whitepaper_link)))
}
})
return(coins_df_clean[rows,])
}
coins_table <- process_coins(my_coins_URL,c(1:10))
head(coins_table)
# uses fromJSON instead of GET
process_coins <- function(my_coins_URL, rows) {
# read in details table
coins <- fromJSON(my_coins_URL)
coins$tags <- NULL
coins_df<-do.call(data.frame, coins)
# process details table
coins_df_clean <- coins_df[,c(1:3)]
coins_df_clean$priceUSD <- round(as.numeric(coins_df$price_stats.usd$price))
coins_df_clean$priceBTC <- round(as.numeric(coins_df$price_stats.btc$price,2))
coins_df_clean$volume24h.USD <- round(as.numeric(coins_df$price_stats.usd$volume_24h,2))
coins_df_clean$Marketcap.USD <- as.numeric(coins_df$price_stats.usd$market_cap)
coins_df_clean$priceATH.USD <- round(coins_df$ath.usd$price,2)
coins_df_clean$percent_fromATH.USD <- coins_df$ath.usd$percent_from # % from all time high level
coins_df_clean$percent_toATH.USD <- coins_df$ath.usd$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.USD <- as.POSIXct(coins_df$ath.usd$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.BTC <- round(coins_df$ath.btc$price,2)
coins_df_clean$percent_fromATH.BTC <- coins_df$ath.btc$percent_from # % from all time high level
coins_df_clean$percent_toATH.BTC <- coins_df$ath.btc$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.BTC <- as.POSIXct(coins_df$ath.btc$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.ETH <- round(coins_df$ath.eth$price,2)
coins_df_clean$percent_fromATH.ETH <- coins_df$ath.eth$percent_from # % from all time high level
coins_df_clean$percent_toATH.ETH <- coins_df$ath.eth$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.ETH <- as.POSIXct(coins_df$ath.eth$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$rank <- coins_df$rank
coins_df_clean$type <- coins_df$type
# get links to coins, add it to link table
coin_link_df <- data.frame(
coin_link = sapply(coins$url_name, function(url_name){
paste0("https://coinpaprika.com/coin/",url_name)
}),
coin_name = coins$symbol,
stringsAsFactors = FALSE)
# for each link in the coin_link_df table scrape whitepaper and safe it in folder Whitepapers
# do not download if there is no proper downloadlink
pbapply(coin_link_df[rows,], MARGIN = 1, FUN = function(link_df) {
xml_page <- read_html(link_df[1])
if(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href'))!=0) {
whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href') %>%
`[[`(1)
}
# download file from whitepaper_link to Whitpapers
if (length(grep("https://", whitepaper_link) != 0)) {
download.file(whitepaper_link,
destfile = paste0("Whitepapers/WP_",link_df[2],"_",basename(whitepaper_link)))
}
})
return(coins_df_clean)
}
coins_table <- process_coins(my_coins_URL,c(1:10))
head(coins_table)
# uses fromJSON instead of GET
process_coins <- function(my_coins_URL, rows) {
# read in details table
coins <- fromJSON(my_coins_URL)
coins$tags <- NULL
coins_df<-do.call(data.frame, coins)
# process details table
coins_df_clean <- coins_df[,c(1:3)]
coins_df_clean$priceUSD <- round(as.numeric(coins_df$price_stats.usd$price))
coins_df_clean$priceBTC <- round(as.numeric(coins_df$price_stats.btc$price,2))
coins_df_clean$volume24h.USD <- round(as.numeric(coins_df$price_stats.usd$volume_24h,2))
coins_df_clean$Marketcap.USD <- as.numeric(coins_df$price_stats.usd$market_cap)
coins_df_clean$priceATH.USD <- round(coins_df$ath.usd$price,2)
coins_df_clean$percent_fromATH.USD <- coins_df$ath.usd$percent_from # % from all time high level
coins_df_clean$percent_toATH.USD <- coins_df$ath.usd$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.USD <- as.POSIXct(coins_df$ath.usd$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.BTC <- round(coins_df$ath.btc$price,2)
coins_df_clean$percent_fromATH.BTC <- coins_df$ath.btc$percent_from # % from all time high level
coins_df_clean$percent_toATH.BTC <- coins_df$ath.btc$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.BTC <- as.POSIXct(coins_df$ath.btc$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$priceATH.ETH <- round(coins_df$ath.eth$price,2)
coins_df_clean$percent_fromATH.ETH <- coins_df$ath.eth$percent_from # % from all time high level
coins_df_clean$percent_toATH.ETH <- coins_df$ath.eth$percent_to # % growth rate to reach all time high level
coins_df_clean$updated_at.ETH <- as.POSIXct(coins_df$ath.eth$updated_at$date, format = "%Y-%m-%d %H:%M:%S")
coins_df_clean$rank <- coins_df$rank
coins_df_clean$type <- coins_df$type
# get links to coins, add it to link table
coin_link_df <- data.frame(
coin_link = sapply(coins$url_name, function(url_name){
paste0("https://coinpaprika.com/coin/",url_name)
}),
coin_name = coins$symbol,
stringsAsFactors = FALSE)
# for each link in the coin_link_df table scrape whitepaper and safe it in folder Whitepapers
# do not download if there is no proper downloadlink
apply(coin_link_df[rows,], MARGIN = 1, FUN = function(link_df) {
xml_page <- read_html(link_df[1])
if(length(whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href'))!=0) {
whitepaper_link <- xml_page %>%
html_nodes('.cp-coin__mobile-reverse td a') %>%
html_attr('href') %>%
`[[`(1)
}
# download file from whitepaper_link to Whitpapers
if (length(grep("https://", whitepaper_link) != 0)) {
download.file(whitepaper_link,
destfile = paste0("Whitepapers/WP_",link_df[2],"_",basename(whitepaper_link)))
}
})
return(coins_df_clean)
}
coins_table <- process_coins(my_coins_URL,c(1:10))
head(coins_table)
coins_table <- process_coins(my_coins_URL,c(1:10))
head(coins_table)
saveRDS(coins_table, "coins_table.rds")
